buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'idea'

group 'driver'
version '1.0'
//mainClassName = "io.ktor.server.jetty.EngineMain"
mainClassName = "driver.ApplicationKt"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "io.ktor:ktor-metrics:$ktor_version"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-websockets:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"
    
//    compile "io.ktor:ktor-client-core:$ktor_version"
//    compile "io.ktor:ktor-client-core-jvm:$ktor_version"
//    compile "io.ktor:ktor-client-apache:$ktor_version"
//    compile "io.ktor:ktor-client-logging-jvm:$ktor_version"
    
    compile "org.koin:koin-ktor:$koin_version"
    compile "com.xenomachina:kotlin-argparser:$argparser_version"
    compile "io.github.microutils:kotlin-logging:1.6.24"
    compile "commons-io:commons-io:2.6"
//    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
    
    testCompile "io.ktor:ktor-server-tests:$ktor_version"
}

// This task will generate your fat JAR and put it in the ./build/libs/ directory
shadowJar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    // This is needed for jetty for proper functioning outside od IDE
//    transform(ServiceFileTransformer) {
//        path = 'META-INF/services'
//        include 'org.eclipse.jetty.http.HttpFieldPreEncoder'
//    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}



